Hi, guys!

In this file you can see some examples of my programs by tasks of Codingbat.com in pairs task-solution:


Return true if the given string begins with "mix", except the 'm' can be anything, so "pix", "9ix" .. all count.

public boolean mixStart(String str) {
  
if (str.length()>=3 && str.substring(1, 3). equals ("ix")){return true;}
  
else {return false;}

}


Given a non-empty string and an int N, return the string made starting with char 0, and then every Nth char of the string. So if N is 3, use char 0, 3, 6, ... and so on. N is 1 or more.

public String everyNth(String str, int n) {
  
String world ="";
  
for (int x = 0; x<str.length(); x=x+n)
  { 
world = world+ str.charAt(x);
}
  
return world;

}


Given a string, return a new string where the last 3 chars are now in upper case. If the string has less than 3 chars, uppercase whatever is there. 

public String endUp(String str) {
  
if (str.length()<=3){
return str.toUpperCase() ;
}
  
int x = str.length()-3;
  
String front = str.substring (0, x);
  
String back = str.substring (x);
  
return front+back.toUpperCase();
  

}


Given a string, return true if the first instance of "x" in the string is immediately followed by another "x".

boolean doubleX(String str) {
  
boolean res = false;
  
int ind = str.indexOf("x");
  
if ((str.length() > 1) && (ind < str.length()-1)) {
    
if (str.charAt(ind+1) == 'x') {
res = true;}
    
}
  
return res;

}


Given a string, if a length 2 substring appears at both its beginning and end, return a string without the substring at the beginning, so "HelloHe" yields "lloHe". The substring may overlap with itself, so "Hi" yields "". Otherwise, return the original string unchanged.

public String without2(String str) {
  
if (str.length()==2|| str.length()==0){return "";}
  
if (str.length()==1){return str;}
  
int x = str.length()-2;
  
if (str.substring(0,2).equals (str.substring(x))) {return str.substring(2);}
  
else {return str;}
  
}



Given a string, if one or both of the first 2 chars is 'x', return the string without those 'x' chars, and otherwise return the string unchanged. This is a little harder than it looks.

public String withoutX2(String str) {

if (str.length()<2){return "";}
  
else if (str.charAt(0) == 'x' &&  str.charAt(1) == 'x'){return str.substring(2); }

else if (str.charAt(0) == 'x' ){return str.substring(1);}
   
else if( str.charAt(1) == 'x'){return  str.charAt(0)  + str.substring (2);}
   
else {return str;}

}


Given an array of ints of odd length, look at the first, last, and middle values in the array and return the largest. The array length will be a least 1.

public int maxTriple(int[] nums) {
  
int lenga = nums.length;
  
int midla = ((lenga-1)/2);
  
int res = nums[0];
  
if (nums[lenga-1] > res) {res = nums[lenga-1];}
  
if (nums[midla] > res) {res = nums[midla];}
  
return res;

}


We'll say that a 1 immediately followed by a 3 in an array is an "unlucky" 1. Return true if the given array contains an unlucky 1 in the first 2 or last 2 positions in the array.

public boolean unlucky1(int[] nums) {
  
boolean un = false;
  
if (nums.length >1) {
  
if ((nums[0] == 1 && nums[1] == 3) || (nums[1] == 1 && nums[2] == 3) || (nums[nums.length-2] == 1 && nums[nums.length-1] == 3)) un = true;
  
}
  
return un;

}


Given 2 int arrays, a and b, of any length, return a new array with the first element of each array. If either array is length 0, ignore that array.

public int[] front11(int[] a, int[] b) {
  
int k = 0;
  
if (a.length >0) k++;
  
if (b.length > 0) k++;
  
int [] res = new int [k];
  
  
if (a.length >0) {res[0] = a[0];
if (b.length > 0) res[1] = b[0];}
    
else {if (b.length > 0) res[0] = b[0];}
  
return res;

}


You have a red lottery ticket showing ints a, b, and c, each of which is 0, 1, or 2. If they are all the value 2, the result is 10. Otherwise if they are all the same, the result is 5. Otherwise so long as both b and c are different from a, the result is 1. Otherwise the result is 0.

public int redTicket(int a, int b, int c) {

if(a==2 && b==2 && c==2){return 10;}
 
else if(a==b && b==c){return 5;}
 
else if (a==b || a==c){return 0;}

else {return 1;}
  

}



Given two ints, each in the range 10..99, return true if there is a digit that appears in both numbers, such as the 2 in 12 and 23.

public boolean shareDigit(int a, int b) {

if(a/10 == b%10 || a%10==b/10 || a/10==b/10 || a%10 == b%10){return true;}
  
else{return false;}

}


For this problem, we'll round an int value up to the next multiple of 10 if its rightmost digit is 5 or more, so 15 rounds up to 20. Alternately, round down to the previous multiple of 10 if its rightmost digit is less than 5, so 12 rounds down to 10. Given 3 ints, a b c, return the sum of their rounded values.

public int roundSum(int a, int b, int c) {
return (round10(a) + round10(b) + round10(c));

}

public int round10(int num) {

if (num%10 <5) {num -= num%10;}
  
if (num%10 >4) {num += (10-num%10);}
  
return num;

}


Given three ints, a b c, return true if one of b or c is "close" (differing from a by at most 1), while the other is "far", differing from both other values by 2 or more. Note: Math.abs(num) computes the absolute value of a number.

public boolean closeFar(int a, int b, int c) {

boolean closeB = Math.abs(b-a)<2;
  
boolean closeC = Math.abs(c-a)<2;
  
boolean farB = (Math.abs(b-a)>1 && Math.abs(b-c)>1);
  
boolean farC = (Math.abs(c-a)>1 && Math.abs(c-b)>1);
  
return ((closeB || closeC) && (farB || farC));

}


Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.

public int blackjack(int a, int b) {
  
if (a>21) a = 0;
  
if (b>21) b = 0;
  
return Math.max(a, b);

}


Given three ints, a b c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.

public boolean evenlySpaced(int a, int b, int c) {
  
int min = Math.min(a, Math.min(b, c));
  
int max = Math.max(a, Math.max(b, c));
  
int mid = a;
  
if (b != max  && b != min) mid = b;
  
if (c != max  && c != min) mid = c;
  
return (max - mid == mid - min); 

}


We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.

public int makeChocolate(int small, int big, int goal) {
  
int res = 0;
  
if (((big*5 + small) >= goal) && (small >= goal%5)) {
    
if (big >= goal/5) {res = goal%5;}
      
else {res = (goal - big*5);
      
}
  
}
  
else res = -1;
  
return res;

}



Given two strings, a and b, create a bigger string made of the first char of a, the first char of b, the second char of a, the second char of b, and so on. Any leftover chars go at the end of the result.

public String mixString(String a, String b) {
  
String result = "";
  
int minLength = a.length();
  
if (b.length() < a.length())  minLength = b.length();
  
for (int i = 0; i < minLength; i++)  {
      
result = result + a.charAt(i) + b.charAt(i);
    }
  
if (a.length() > b.length()) result = result + a.substring (b.length());
  
else if (a.length() < b.length()) result = result + b.substring (a.length());
  
return result;

}


Given a string and an int n, return a string made of the first n characters of the string, followed by the first n-1 characters of the string, and so on. You may assume that n is between 0 and the length of the string, inclusive (i.e. n >= 0 and n <= str.length()).

public String repeatFront(String str, int n) {
  
String res = str.substring(0, n);
  
for (int i = n-1; i >=0; i--) {
res += str.substring(0, i);
  }
  
return res;

}


Given a string, consider the prefix string made of the first N chars of the string. Does that prefix string appear somewhere else in the string? Assume that the string is not empty and that N is in the range 1..str.length().

public boolean prefixAgain(String str, int n) {
  
boolean res = false;
  
String prefix = str.substring(0, n);
  
for (int i = 1; i < str.length()-n+1; i++) {
    
if (str.substring(i, i+n).equals(prefix)) res = true;
  }
 
return res;

}


Given a string, does "xyz" appear in the middle of the string? To define middle, we'll say that the number of chars to the left and right of the "xyz" must differ by at most one.

public boolean xyzMiddle(String str) {
  
boolean res = false;
  
int middle = str.length()/2;
  
if (str.length()%2 == 1 && str.length()>2) {
    
if (str.substring(middle-1, middle+2).equals("xyz")) res = true;
  
}
  else if (str.length()%2 == 0 && str.length()>2) {
 
if (str.substring(middle-2, middle+1).equals("xyz") || (str.substring(middle-1, middle+2).equals("xyz"))) 
res = true;
  
}
  
return res;

}


A sandwich is two pieces of bread with something in between. Return the string that is between the first and last appearance of "bread" in the given string, or return the empty string "" if there are not two pieces of bread.

public String getSandwich(String str) {
  
boolean doubleBread = false;
  
String res = "";
  
int first = 0;
  
int last = 0;
  
for (int i = 0; i < str.length()-4; i++) {
    
if (str.substring(i, i+5).equals("bread")) last = i;
  
}
  
for (int i = str.length()-5; i >=0; i--) {
    
if (str.substring(i, i+5).equals("bread")) first = i;
  
}
  
if (last != first) {
res = str.substring(first+5, last);
  
}
  
return res;

}